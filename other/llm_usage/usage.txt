LLM: Perplexity.
Date: 15 November 2024


User
I want to download files from a public dropbox link and save them to a directory. The csvs in this directory are in the vector c("AllstarFull.csv","Appearances.csv","AwardsManagers.csv","AwardsPlayers.csv","AwardsShareManagers.csv",
    "AwardsSharePlayers.csv","Batting.csv","BattingPost.csv","CollegePlaying.csv","Fielding.csv","FieldingOF.csv",
    "FieldingOFsplit.csv","FieldingPost.csv","HallOfFame.csv","HomeGames.csv","Managers.csv","ManagersHalf.csv",
    "Parks.csv","People.csv","Pitching.csv","PitchingPost.csv","Salaries.csv","Schools.csv","SeriesPost.csv",
    "Teams.csv","TeamsFranchises.csv","TeamsHalf.csv")
Perplexity
Here's how you can implement this in R:
# Load necessary library
if (!requireNamespace("curl", quietly = TRUE)) {
    install.packages("curl")
}
library(curl)

# Define the base URL of the public Dropbox folder (ensure it's modified for direct download)
base_url <- "https://www.dropbox.com/s/your_folder_link/"  # Replace with your actual link
dest_dir <- "path/to/your/directory/"  # Specify your desired directory

# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
    dir.create(dest_dir)
}

# List of CSV files to download
csv_files <- c(
    "AllstarFull.csv",
    "Appearances.csv",
    "AwardsManagers.csv",
    "AwardsPlayers.csv",
    "AwardsShareManagers.csv",
    "AwardsSharePlayers.csv",
    "Batting.csv",
    "BattingPost.csv",
    "CollegePlaying.csv",
    "Fielding.csv",
    "FieldingOF.csv",
    "FieldingOFsplit.csv",
    "FieldingPost.csv",
    "HallOfFame.csv",
    "HomeGames.csv",
    "Managers.csv",
    "ManagersHalf.csv",
    "Parks.csv",
    "People.csv",
    "Pitching.csv",
    "PitchingPost.csv",
    "Salaries.csv",
    "Schools.csv",
    "SeriesPost.csv",
    "Teams.csv",
    "TeamsFranchises.csv",
    "TeamsHalf.csv"
)

# Loop through each file and download it
for (file_name in csv_files) {
    # Construct the full URL for each file
    file_url <- paste0(base_url, file_name, "?dl=1")  # Ensure direct download
    
    # Construct the full path for saving the downloaded file
    dest_file <- file.path(dest_dir, file_name)  # Full path for saving

    # Download the file
    tryCatch({
        curl_download(file_url, destfile = dest_file)
        cat("Downloaded:", file_name, "to", dest_file, "\n")  # Indicate where the file was saved
    }, error = function(e) {
        cat("Error downloading", file_name, ":", e$message, "\n")
    })
}


User
check for the following using test_that:
yearID is either 2022 or 2023, lgID is either AL or NL, the following teams are in the AL --- BAL, BOS, CHW, CLE, DET, HOU, KC, LAA, MIN, NYY, OAK, SEA, TB, TEX, TOR --- and the following teams are in the NL --- ARI, ATL, CHC, CIN, COL, LAD, MIA, MIL, NYM, PHI, PIT, SD, SFG, STL, WAS.
win_pct is between 0 and 1 inclusive and is equal to W/162 rounded to 3 decimal places, W + L = 162, W and L are both non-negative integers, run_diff is any integer, SB is any non-negative integer, runs_per_game and ERA are both non-negative
Perplexity
#### Workspace setup ####
library(tidyverse)
library(testthat)
library(arrow)  # Ensure the arrow package is loaded to read parquet files

# Load the cleaned team data from a Parquet file
team_data <- read_parquet("data/02-analysis_data/cleaned_lahman_team_data.parquet")

# Define the test suite
test_that("Team Data Validation Tests", {
  
  # Check that yearID is either 2022 or 2023
  expect_true(all(team_data$yearID %in% c(2022, 2023)), 
              info = "yearID should be either 2022 or 2023")
  
  # Check that lgID is either AL or NL
  expect_true(all(team_data$lgID %in% c("AL", "NL")), 
              info = "lgID should be either 'AL' or 'NL'")
  
  # Define teams in AL and NL
  al_teams <- c("BAL", "BOS", "CHW", "CLE", "DET", 
                "HOU", "KC", "LAA", "MIN", 
                "NYY", "OAK", "SEA", "TB", 
                "TEX", "TOR")
  
  nl_teams <- c("ARI", "ATL", "CHC", "CIN",
                "COL", "LAD", "MIA", "MIL",
                "NYM", "PHI", "PIT", "SD",
                "SFG", "STL", "WAS")
  
  # Check that teams are correctly categorized by league
  expect_true(all(team_data$team_abbrev[team_data$lgID == 'AL'] %in% al_teams), 
              info = "All AL teams should be in the predefined list")
  
  expect_true(all(team_data$team_abbrev[team_data$lgID == 'NL'] %in% nl_teams), 
              info = "All NL teams should be in the predefined list")
  
  # Check that win_pct is between [0-1] and equals W/162 rounded to three decimal places
  expect_true(all(team_data$win_pct >=0 & team_data$win_pct <=1), 
              info = "win_pct should be between 0 and 1 inclusive")
  
  expect_equal(round(team_data$W / (162), digits=3), round(team_data$win_pct, digits=3), 
               info = "win_pct should equal W/162 rounded to three decimal places")
  
  # Check that W + L equals to games played (162)
  expect_equal(team_data$W + team_data$L,
               rep(162, nrow(team_data)), 
               info = "The sum of W and L should equal 162")
  
  # Check that W and L are non-negative integers
  expect_true(all(team_data$W >=0 & team_data$L >=0), 
              info = "Wins (W) and Losses (L) should be non-negative integers")
  
  # Check that run_diff is any integer
  expect_true(all(is.integer(team_data$run_diff)), 
              info = "run_diff should be an integer")
  
  # Check that SB is any non-negative integer
  expect_true(all(team_data$SB >=0 & team_data$SB %% 1 == 0), 
              info = "SB should be a non-negative integer")
  
  # Check that runs_per_game and ERA are both non-negative
  expect_true(all(team_data$runs_per_game >=0), 
              info = "runs_per_game should be non-negative")
  
  expect_true(all(team_data$ERA >=0), 
              info = "ERA should be non-negative")
})

User
make a boxplot of win_pct by yearID
Perplexity
# Create a boxplot of win_pct by yearID
ggplot(win_data, aes(x = as.factor(yearID), y = win_pct, fill = as.factor(yearID))) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  labs(x = "Year",
       y = "Win Percentage",
       fill = "Year") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

User
can you generate appropriate histograms for runs_per_game, ERA, HA_9, and SB
Perplexity
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Sample data frame based on your provided data
data <- data.frame(
  yearID = c(2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017),
  team_abbrev = c("BAL", "BOS", "CHW", "CLE", "DET", "HOU", "KC", "LAA", "MIN", "NYY"),
  win_pct = c(0.463, 0.574, 0.414, 0.630, 0.395, 0.623, 0.494, 0.494, 0.525, 0.562),
  W = c(75, 93, 67, 102, 64, 101, 80, 80, 85, 91),
  L = c(87, 69, 95, 60, 98, 61, 82, 82, 77, 71),
  run_diff = c(-98, 117, -114, 254, -159, 196, -89, 1, 27, 198),
  runs_per_game = c(4.59, 4.85, 4.36, 5.05, 4.54, 5.53, 4.33, 4.38, 5.03, 5.30),
  ERA = c(4.97, 3.70, 4.78, 3.30, 5.36, 4.12, 4.61, 4.20, 4.59, 3.72),
  HA_9 = c(9.40, 8.40, 8.76, 7.92,10.10 ,8.18 ,9.27 ,8.58 ,9.32 ,7.75),
 SB = c(32 ,106 ,71 ,88 ,65 ,98 ,91 ,136 ,95 ,90)
)

# Create histograms for each variable

# Histogram for runs_per_game
ggplot(data) +
    geom_histogram(aes(x = runs_per_game), binwidth = .1,
                   fill = "lightblue", color = "darkblue") +
    labs(title = "Histogram of Runs Per Game",
         x = "Runs Per Game",
         y = "Frequency") +
    theme_minimal()

# Histogram for ERA
ggplot(data) +
    geom_histogram(aes(x = ERA), binwidth = .1,
                   fill = "lightgreen", color = "darkgreen") +
    labs(title = "Histogram of ERA",
         x = "Earned Run Average (ERA)",
         y = "Frequency") +
    theme_minimal()

# Histogram for HA_9
ggplot(data) +
    geom_histogram(aes(x = HA_9), binwidth = .5,
                   fill = "lightcoral", color = "darkred") +
    labs(title = "Histogram of Hits Allowed Per Game (HA/9)",
         x = "Hits Allowed Per Game (HA/9)",
         y = "Frequency") +
    theme_minimal()

# Histogram for SB
ggplot(data) +
    geom_histogram(aes(x = SB), binwidth =10,
                   fill = "lightyellow", color = "orange") +
    labs(title = "Histogram of Stolen Bases (SB)",
         x = "Stolen Bases",
         y = "Frequency") +
    theme_minimal()
    
User
how to extract model coefficients with tidymodels
Perplexity
# Load necessary libraries
library(tidymodels)
library(dplyr)
library(here)

# Read cleaned data
clean_data <- read_parquet(here("data", "02-analysis_data", "cleaned_lahman_team_data.parquet"))

# Fit the linear regression model using tidymodels
model_tidymodels <- linear_reg() |> 
  set_engine("lm") |> 
  fit(win_pct ~ runs_per_game + ERA + HA_9 + SB, data = clean_data)

# Extract model coefficients using tidy
model_coefficients <- tidy(model_tidymodels)

# Display the coefficients
print(model_coefficients)

User
I want to generate a bar graph with the prediction errors for each team
Perplexity
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(here)

# Create a sample data frame based on the provided data
data <- data.frame(
  teamID = c("Arizona Diamondbacks", "Atlanta Braves", "Baltimore Orioles", 
             "Boston Red Sox", "Chicago Cubs", "Chicago White Sox"),
  Runs_Scored = c(886, 704, 786, 751, 736, 507),
  Runs_Against = c(788, 607, 699, 747, 669, 813),
  Actual_Win_Percent = c(0.549, 0.549, 0.562, 0.500, 0.512, 0.253),
  Pythagorean_Win_Percent = c(0.5583425, 0.5735865, 0.5583855, 
                               0.5026702, 0.5475786, 0.2800043)
)

# Calculate prediction errors
data <- data %>%
  mutate(Win_Error = Actual_Win_Percent - Pythagorean_Win_Percent)

# Create a scatter plot of actual vs predicted win percentage
ggplot(data) +
    geom_bar(aes(x = reorder(teamID, Win_Error), y = Win_Error), 
             stat = "identity", fill = "steelblue") +
    coord_flip() + # Flip coordinates for better readability
    labs(x = "Team",
         y = "Win % Error",
         title = "Absolute Error in Win Percentage: Actual vs Pythagorean") +
    theme_minimal()

User
i want the team standard batting and team standard pitching tables from baseball reference, can you extract them using R
ChatGPT
# Load required libraries
library(rvest)
library(dplyr)

# Define the URLs for batting and pitching tables
batting_url <- "https://www.baseball-reference.com/leagues/majors/2024.shtml"
pitching_url <- "https://www.baseball-reference.com/leagues/majors/2024-standard-pitching.shtml"

# Function to extract tables from a given URL
extract_table <- function(url, table_index) {
  page <- read_html(url)
  tables <- html_nodes(page, "table")
  table_data <- html_table(tables[[table_index]], fill = TRUE)
  return(table_data)
}

# Extract Team Standard Batting (first table)
team_standard_batting <- extract_table(batting_url, 1)

# Extract Team Standard Pitching (first table)
team_standard_pitching <- extract_table(pitching_url, 1)

# Display the extracted tables
print("Team Standard Batting:")
print(team_standard_batting)

print("Team Standard Pitching:")
print(team_standard_pitching)